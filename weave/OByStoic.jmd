## Oxygen by stoichiometry
Using the `asoxide(...)` and `obystoichiometry(...)` functions
```julia
using NeXLCore
```

Start with a measured dictionary of mass fractions and use the function `obystoichiometry(...)` to calculate the mass
fraction of oxygen (using the default set of valences.)
```julia
measured = Dict(n"Al"=>0.06986, n"Si"=>0.042324, n"Ca"=>0.063917, n"Ti"=>0.072963, n"Zn"=>0.11421, n"Ge"=>0.317435)
measured[n"O"] = obystoichiometry(measured)
```

```julia
material("ADM-65005a",measured)
```
The variable `NeXLCore.valences` contains the default valences.  Copy it and then edit it to use different  assumptions.

```julia
altvalences = [ NeXLCore.defaultValences... ]
altvalences[z(n"Fe")] = 3
```
In one case, FeO, and in the other Fe<sub>2</sub>O<sub>3</sub>.

```julia
( asoxide(n"Fe"), asoxide(n"Fe",valences=altvalences) )
```
You can add a similar argument to `obystoichiometry(...)` also.

There is a second usage of `asoxide(...)` when a dictionary is provided.  This calculates a mixture of oxides from the
mass fraction of each constituent oxide.  The results is a dictionary that maps the oxide to the mass-fractions of that oxide.
This is intended to be used when you have measured the mass fraction of all elements except O and want to know how
much oxygen is in the sample. 
```julia
asoxide(n"Al"=>0.0491,n"Ca"=>0.1090,n"Fe"=>0.0774,n"Mg"=>0.1166,n"Si"=>0.2120)
```
The result may be passed to the `sum(...)` function to produce a `Material` datum.
```julia
k412=sum(asoxide(n"Al"=>0.0491,n"Ca"=>0.1090,n"Fe"=>0.0774,n"Mg"=>0.1166,n"Si"=>0.2120), name="K412")
k411=sum(asoxide(n"Mg"=>0.0885,n"Si"=>0.2538,n"Ca"=>0.1106,n"Fe"=>0.1122), name="K411")
ENV["Columns"]=160
using DataFrames
vcat(asa(DataFrame, k411),asa(DataFrame, k412))
```
```julia
asa(DataFrame, [k411, k412] )
```
